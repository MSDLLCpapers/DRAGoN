
process {
    tag = { meta.id }
    publishDir = [
        path: { "${params.IO.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: "copy",
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        enabled: {task.ext.publishEnabled == null || task.ext.publishEnabled}
    ]

    withName: 'BuildStarIndex' {
        tag = null
        ext.memory = { params.Align.MEM }
        errorStrategy = "finish"
        publishDir = [
            path: { "${params.IO.star}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename.replace(/^idx\//, '') },
            enabled: { !workflow.profile.tokenize(',').contains('test') },
        ]
        ext.args = { "--sjdbOverhang ${params.private.overhang}" }
    }

    withName: 'MaybeRestoreFromS3' {
        tag = null
        errorStrategy = "finish"
        ext.publishEnabled = false
        debug = true
    }

    withName: 'BCL2FASTQ' {
        tag = null
        errorStrategy = "finish"
        publishDir = [
            path: { !workflow.profile.tokenize(',').findAll{prf -> prf =~ /.*test.*/}.isEmpty() ? "${params.IO.outdir}/fastq" : "${params.IO.fastqdir}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename.replace(/^output\//, '') },
        ]
    }

    withName: 'ParseMetadataXLSX' {
        tag = null
        errorStrategy = "finish"
        ext.publishEnabled = false
        debug = true
    }

    withName: 'FastQC' {
        // errorStrategy = "ignore"
        tag = {"${meta.stage}:${meta.id2}"}
        ext.prefix = {"${meta.stage}.${meta.id2}"}
        ext.publishEnabled = false
    }

    withName: 'Demultiplex' {
        tag = { "${meta.id2}" }
        ext.prefix = {"${meta.id2}"}
        ext.publishEnabled = false
        ext.args = {
            "--bclen ${meta.bclen} --umistart ${meta.bclen + 1} --umilen ${params.Demux.umilen} --split ${[meta.numbc, params.Demux.split].min()} --mismatch ${params.Demux.mismatch} --min-length ${params.Demux.minLength} --min-qual ${params.Demux.minQuality} --min-qual-bases ${params.Demux.minUmiQualBases} --max-AT ${params.Demux.maxATcontent} --max-GC ${params.Demux.maxGCcontent} --min-homop-len ${params.Demux.homoPolymer} --max-homop-mmatch ${params.Demux.maxHomoMmatch} --max-bc-ns ${params.Demux.bcNcountMax == null ? params.Demux.mismatch : params.Demux.bcNcountMax} --check-bcs --adapter ${params.Demux.adapter} ${params.IO.keep_bam ? "" : "--discard-failed"}"
        }
    }

    withName: 'MergeDemuxJson' {
        publishDir = [
            path: { "${params.IO.outdir}/${meta.id}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        ext.prefix = { "${meta.id}" }
        errorStrategy = "terminate"
        ext.args = {
            def xoff = params.Demux.plate_layout_xoff ? "--xoff ${params.Demux.plate_layout_xoff}" : null
            def yoff = params.Demux.plate_layout_yoff ? "--yoff ${params.Demux.plate_layout_yoff}" : null
            return [xoff, yoff].findAll().join(" ")
        }
    }

    withName: 'SAMTOOLS_SPLIT' {
        tag = { "${meta.id2}" }
        ext.prefix = {"${meta.id2}_unmap"}
        ext.publishEnabled = false
        ext.args = { "-M ${meta.numbc + 1} -v -d BI" }
    }

    withName: 'DownsampleBAM' {
        tag = { "${meta.id2}:${meta.bcidx}" }
        ext.prefix = {"${meta.id2}_${meta.bcidx}"}
        ext.publishEnabled = false
        ext.args = {

            def getDownsampleArg = { val, flag ->
                val ? "${flag} ${val instanceof Boolean ? '' : val}" : ''
            }

            def thresholdArg = getDownsampleArg(params.Demux.downsample_threshold, '-T')
            def downsampleArg = getDownsampleArg(params.Demux.downsample_to, '-t')
            def seedArg = params.Demux.downsample_seed != null ? "-k ${params.Demux.downsample_seed}" : ''
            return "-n ${meta.bcidx} ${thresholdArg} ${downsampleArg} ${seedArg}"
        }
    }

    withName: 'STAR_ALIGN' {
        ext.memory = { params.Align.MEM }
        tag = {"${meta.id}:${meta.bcidx}"}
        ext.prefix = {"${meta.id}.${meta.bcidx}"}
        ext.publishEnabled = false
        ext.args = {
            def soloArgs = ''
            def outSAMtypeSortOrder = 'Unsorted'
            def outSAMattributes = 'All'
            if (isSolo) {
                def ambiguous = ((params.Dedup.ambiguous instanceof List ? params.Dedup.ambiguous : params.Dedup.ambiguous.split(',')) + 'Unique').toUnique().join(' ')
                soloArgs = """
                --soloType CB_UMI_Simple \\
                --soloInputSAMattrBarcodeSeq CB UB --soloInputSAMattrBarcodeQual CY UY \\
                --soloCBlen "${meta.bclen}" --soloUMIstart "${meta.bclen + 1}" --soloUMIlen "${params.Demux.umilen}" \\
                --soloCBwhitelist <(cut -f1 "$barcodes") \\
                --soloCBmatchWLtype Exact \\
                --soloCellFilter None \\
                --soloMultiMappers ${ambiguous} \\
                --outBAMsortingThreadN 1 --limitBAMsortRAM 68000000000
                """.strip()
                outSAMtypeSortOrder = 'SortedByCoordinate'
                outSAMattributes = 'NH HI nM AS CR UR CY UY CB UB GX GN sS sQ sM'
            }

            """
            --readFilesType SAM SE --readFilesCommand samtools view -h \\
            --twopassMode "${params.Align.twopassMode}" \\
            --outFilterType Normal \\
            --outFilterMultimapNmax ${params.Align.outFilterMultimapNmax} \\
            --outFilterMultimapScoreRange ${params.Align.outFilterMultimapScoreRange} \\
            --alignIntronMin ${params.Align.alignIntronMin} --alignIntronMax ${params.Align.alignIntronMax} \\
            --outSAMtype BAM ${outSAMtypeSortOrder} \\
            --outSAMattributes ${outSAMattributes} \\
            --outFilterMatchNmin ${params.Align.outFilterMatchNmin} \\
            --outFilterMismatchNoverLmax ${params.Align.outFilterMismatchNoverLmax} \\
            --outSAMorder Paired --outSAMprimaryFlag OneBestScore \\
            --outMultimapperOrder Random \\
            --outSAMunmapped None --outReadsUnmapped Fastx \\
            --clip5pNbases ${params.Align.clip5pNbases} --clip3pNbases ${params.Align.clip3pNbases} \\
            --alignEndsType Local \\
            ${soloArgs} \\
            ${params.Align.star_extraOptions ?: ''}
            """.strip()
        }
    }

    withName: 'FeatureCounts' {
        ext.memory = { params.Count.MEM }
        tag = {"${meta.id}:${meta.bcidx}"}
        ext.prefix = {"${meta.id}.${meta.bcidx}"}
        ext.publishEnabled = false
        ext.args = {
            def extraOptions = params.Count.count_extraOptions ?: ''
            "-s ${params.Count.strandness} --fracOverlap ${params.Count.fracOverlap} ${extraOptions}"
        }
    }

    withName: 'SAMTOOLS_SORT' {
        tag = {"${meta.id}:${meta.bcidx}"}
        ext.sort_proc = {
            def processName = task.process.tokenize(':')[-1]
            return processName == 'SAMTOOLS_SORT' ? params.nf_test_sort_proc : processName
        }
        ext.prefix = {
            def suff = task.ext.sort_proc.replace(/Sort/, 'sorted')
            "${meta.id}.${meta.bcidx}.${suff}"
        }
        ext.publishEnabled = false
        ext.args = {
            "${task.ext.sort_proc == 'SortByName' ? '-n' : ''} -T CB -O BAM -m 768M"
        }
    }

    withName: 'Deduplicate' {
        tag = {"${meta.id}:${meta.bcidx}"}
        ext.prefix = {"${meta.id}.${meta.bcidx}"}
        ext.publishEnabled = false
        ext.args = {
            "--umilen ${params.Demux.umilen} --max-distance ${params.Dedup.umi_mismatch} --max-lookback ${params.Dedup.umiDist} ${params.Dedup.debug ? '--debug' : ''} --keep-bam"
        }
    }

    withName: 'CountUnmappedReads' {
        ext.prefix = { "${meta.id}" }
        ext.publishEnabled = false
    }

    withName: 'MergeDragonOutput' {
        publishDir = [
            path: { "${params.IO.outdir}/${meta.id}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        ext.prefix = { "${meta.id}" }
        errorStrategy = 'finish'
    }

    withName: 'GenerateReport' {
        publishDir = [
            path: { "${params.IO.outdir}/${meta.id}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        ext.prefix = { "${meta.id}" }
        errorStrategy = 'finish'
    }

    withName: 'SAMTOOLS_STATS' {
        tag = {"${meta.id}:${meta.bcidx}"}
        ext.prefix = {"${meta.id}.${meta.bcidx}"}
        ext.publishEnabled = false
        ext.args = "-d -F UNMAP,SECONDARY,SUPPLEMENTARY,QCFAIL -p -q ${params.Demux.minQuality}"
    }

    withName: 'GenNormalizedCountsTable' {
        publishDir = [
            path: { "${params.IO.outdir}/${meta.id}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        tag = {"${meta.id}:${raw_counts.baseName}:${kind}"}
        ext.prefix = {"${meta.id}.${raw_counts.baseName}.${kind}"}
    }

    withName: 'MultiQC' {
        publishDir = [
            path: { params.IO.outdir },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        tag = null
        ext.args = "-z"
    }

    withName: 'SAMTOOLS_MERGE' {
        publishDir = [
            path: { "${params.IO.outdir}/${meta.id}" },
            mode: "copy",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: true
        ]
        errorStrategy = 'ignore'
        ext.prefix = 'DRUGseq_Merged'
    }

    withName: 'PIGZ' {
        tag = { meta }
        ext.prefix = { file_in.baseName }
        ext.suffix = {
            def taskname = task.process.tokenize(':')[-1]
            taskname == 'Unpigz' ? '' : '.gz'
        }
        ext.args = {
            def taskname = task.process.tokenize(':')[-1]
            "${taskname == 'Unpigz' ? '-d' : ''} -c"
        }
    }
}
