manifest {
    version         = '1.7.0'
    nextflowVersion = "!>=23.10.1"
    name            = 'DRUGseq_Pipeline'
    author          = 'Scott Norton (scott.norton@merck.com)'
    homePage        = 'https://github.com/MSDLLCPapers/DRAGoN'
    defaultBranch   = 'develop'
    description     = "Pipeline for processing DRUG-seq experiments"
}

params {
    IO {
        // FASTQ or BCL files
        fastqdir          = null
        bcldir            = null
        // if fastqdir is empty
        sampleSheet       = null

        // STAR indices
        reference         = null
        // must be prebuilt
        star              = null
        // custom assembly
        gtf               = null
        // custom assembly not yet built
        fasta             = null
        // custom assembly not yet built
        contaminant       = null

        // Metadata
        metadata          = null
        barcodes          = null
        // if metadata not passed
        sampleName        = null
        // if metadata not passed

        // Output
        outdir            = null
        keep_bam          = false

        // Misc
        phred             = '33'
        no_prestage_index = false
    }
    Demux {
        dmuxn                = 0
        split                = 0
        umilen               = 10
        mismatch             = 1
        bcNcountMax          = null
        minQuality           = 20
        minUmiQualBases      = 6
        maxATcontent         = 0.9
        maxGCcontent         = 0.9
        minLength            = 20
        homoPolymer          = 10
        maxHomoMmatch        = 0
        adapter              = "CTGTCTCTTATA"
        data_quality_errors  = "raise"
        // choices: ignore, warn, raise
        downsample_to        = false
        downsample_threshold = false
        downsample_seed      = null
        plate_layout_xoff    = null
        plate_layout_yoff    = null
    }
    Align {
        outFilterMultimapNmax       = 20
        outFilterMatchNmin          = 20
        outFilterMultimapScoreRange = 1
        alignIntronMin              = 1
        alignIntronMax              = 1
        clip5pNbases                = 0
        clip3pNbases                = 0
        outFilterMismatchNoverLmax  = 0.1
        twopassMode                 = 'None'
        extraOptions                = ''
        MEM                         = '64GB'
        versionGenome               = "2.7.4a"
        sjdbOverhang                = 89
    }
    Count {
        fracOverlap              = 0
        strandness               = 1
        extraOptions             = ''
        adjust_effective_lengths = false
        MEM                      = '8GB'
    }
    Dedup {
        umi_mismatch    = 2
        umiDist         = 10
        ambiguous       = "Unique"
        em_iter_max     = 100
        em_max_diff     = 0.01
        em_small_thresh = 0.01
        debug           = false
    }
    count_refs_dir        = null
    star_refs_dir         = null

    implementation        = "C++"
    // choices: "C++" "Python"
    errorStrategy         = "finish"
    // choices: finish, terminate, retry
    maxRetries            = 3
    MINMEM                = '2G'
    MAXMEM                = '4G'
    MAXCPU                = 2
    PLATE_LAYOUT          = "${projectDir}/assets/layout_384.csv"
    pipeline              = 'DRAGoN'
    in_nf_test            = false
    notifyEmails          = ''
    custom_config_version = 'master'
    custom_config_base    = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    awsbatch_jobrole      = null
    awsbatch_queue        = null
    igenomes_base         = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore       = false
}

// Load nf-core custom profiles from different Institutions
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/nfcore_custom.config" : "/dev/null"
includeConfig params.igenomes_ignore ? './conf/igenomes_ignore.config' : "./conf/igenomes.config"

// Load MSDLLCPapers/DRAGoN custom profiles from different institutions.
// includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/pipeline/dragon.config" : "/dev/null"

docker.registry = 'quay.io'
singularity.registry = 'quay.io'
podman.registry = 'quay.io'
charliecloud.registry = 'quay.io'
apptainer.registry = 'quay.io'

// fixes error with process.ext accessed in labels.config
process.ext.dummy = null
includeConfig "./conf/labels.config"

process {
    cpus          = {
        try {
            return Math.min(task.ext.cpus, params.MAXCPU as int)
        }
        catch (all) {
            println("   ### ERROR ###   Max cpus '${params.MAXCPU}' is not valid! Using default value: ${task.ext.cpus}")
            return task.ext.cpus
        }
    }
    memory        = {
        def newBytes = (task.ext.memory as nextflow.util.MemoryUnit).multiply(Math.pow(2, task.attempt - 1))
        def resultBytes = newBytes

        try {
            def minmem = params.MINMEM as nextflow.util.MemoryUnit
            def maxmem = params.MAXMEM as nextflow.util.MemoryUnit
            if (task.ext.minmem) {
                def new_minmem = task.ext.minmem as nextflow.util.MemoryUnit
                if (minmem.compareTo(new_minmem) == -1) {
                    minmem = new_minmem
                }
            }
            if (task.ext.maxmem) {
                def new_maxmem = task.ext.maxmem as nextflow.util.MemoryUnit
                if (maxmem.compareTo(new_maxmem) == 1) {
                    maxmem = new_maxmem
                }
            }

            if (newBytes.compareTo(maxmem) == 1) {
                resultBytes = maxmem
            }
            else if (newBytes.compareTo(minmem) == -1) {
                resultBytes = minmem
            }
            else {
                resultBytes = newBytes
            }
        }
        catch (all) {
            println("   ### ERROR ###   Max memory '${params.MAXMEM}' and/or min memory '${params.MINMEM}' is not valid! Using default value: ${newBytes}")
        }

        if (task.attempt > 1) {
            println("errorStrategy - ${task.name} > Retrying with double memory ${resultBytes.toBytes()}")
        }
        resultBytes.toString()
    }
    errorStrategy = {
        def recognizedCodes = [137, 139, 143, 255]
        println("Retrying task ${task.name} | Attempt: ${task.attempt}")
        task.exitStatus in recognizedCodes || (task.executor == "awsbatch" && task.attempt == 1) ? "retry" : params.errorStrategy
    }
    maxRetries    = { params.maxRetries }

    shell         = """\
bash

set -e # Exit if a tool returns a non-zero status/exit code
set -u # Treat unset variables and parameters as an error
set -o pipefail # Returns the status of the last command to exit with a non-zero status or zero if all successfully execute
set -C # No clobber - prevent output redirection from overwriting files.
"""
}

trace.enabled = true
report.enabled = true

profiles {
    // Runtimes
    conda {
        // Not compatible with awsbatch
        conda.enabled       = true
        docker.enabled      = false
        singularity.enabled = false
    }
    docker {
        // Requires permissions to communicate with the Docker daemon (or awsbatch)
        conda.enabled            = false
        docker.enabled           = true
        docker.fixOwnership      = true
        singularity.enabled      = false
        process.containerOptions = '--net host'
        docker.envWhitelist      = 'AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_SESSION_TOKEN,AWS_REGION'
    }
    singularity {
        // Requires singularity as the frontend
        conda.enabled            = false
        docker.enabled           = false
        singularity.enabled      = true
        singularity.autoMounts   = true
        singularity.envWhitelist = 'AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,AWS_SESSION_TOKEN,AWS_REGION'
    }

    // Parameter sets
    test {
        includeConfig './conf/test.config'
    }

    // Put these here instead of in tests/nextflow.config because parameters defined here always take precedence
    nf_test {

        params.IO.outdir     = 'tests/output'
        params.in_nf_test    = true
        params.errorStrategy = 'terminate'
        params.MAXMEM        = '12G'
        params.MAXCPU        = 8
    }
}

validation {
    lenientMode  = true
    help {
        enabled             = true
        command             = "nextflow run ${manifest.name} -profile <docker/singularity/.../institute> --IO.metadata metadata.xlsx --IO.fastqdir s3://bucket/path/to/fastq/folder/ --IO.outdir <OUTDIR>"
        fullParameter       = "help_full"
        showHiddenParameter = "showHidden"
    }
    ignoreParams = [
        "versionGenome",
        "Dedup.debug",
        "Demux.plate_layout_xoff",
        "Demux.plate_layout_yoff",
    ]
    summary {
        hideParams = [
            "versionGenome",
            "Dedup.debug",
            "Demux.plate_layout_xoff",
            "Demux.plate_layout_yoff",
        ]
    }
}

includeConfig params.count_refs_dir && params.star_refs_dir ? "./conf/genomes.config" : "/dev/null"
includeConfig "./conf/modules.config"
